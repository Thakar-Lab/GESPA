/*GESPA  Copyright (C) 2013  Jay Khurana
 * See GESPA License for additional information.
 */
package DNAFinderMain;

import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.*;
import java.awt.Font;
import java.awt.FlowLayout;
import java.awt.Color;
import java.util.List;
import java.util.ArrayList;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Jay Khurana
 */
public class JFrameMain extends javax.swing.JFrame {

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        initComponents();
        /* Initialize program information */
        JFrameMain.infoRefresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        conLabel = new javax.swing.JLabel();
        updLabel = new javax.swing.JLabel();
        cloudLabel = new javax.swing.JLabel();
        jVerLabel = new javax.swing.JLabel();
        archLabel = new javax.swing.JLabel();
        threadLabel = new javax.swing.JLabel();
        progLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GESPA");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1069, 546));

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel1.setPreferredSize(new java.awt.Dimension(1069, 547));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("New Gene");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GESPA (GEnomic Single nucleotide Polymorphism Analyzer)");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hotspot Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jTextField1.setText("100");
        jTextField1.setInputVerifier(new InputVerifier() {
            public boolean verify(JComponent input) {
                JTextField test = (JTextField) input;
                try{
                    int i=Integer.parseInt(test.getText());
                    if(i<0||i>9999)
                    throw new NumberFormatException();
                    return true;
                }catch(NumberFormatException exe){
                    JOptionPane.showMessageDialog(null,"Please enter an integer greater than 0 and less than 10000", "Warning",JOptionPane.WARNING_MESSAGE);
                    test.setText("100");
                    return false;
                }
            }
        });

        jLabel2.setText("amino acids left of SNP");

        jTextField2.setText("100");
        jTextField2.setInputVerifier(new InputVerifier() {
            public boolean verify(JComponent input) {
                JTextField test = (JTextField) input;
                try{
                    int i=Integer.parseInt(test.getText());
                    if(i<1||i>9999)
                    throw new NumberFormatException();
                    return true;
                }catch(NumberFormatException exe){
                    JOptionPane.showMessageDialog(null,"Please enter an integer greater than 0 and less than 10000", "Warning", JOptionPane.WARNING_MESSAGE);
                    test.setText("100");
                    return false;
                }
            }
        });

        jLabel3.setText("amino acids right of SNP");

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Use hotspots to predict phenotype");
        jCheckBox2.setToolTipText("<html>Predicts phenotype by getting frequency of <br> other phenotypes within indicated range<br> of SNP. Disabled by default if no previously<br>identified SNPs found on gene. </html>");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCheckBox2)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paralogous Gene Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        jPanel4.setName(""); // NOI18N

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Let program add paralogous genes");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText(" Use paralogous genes in analysis");
        jCheckBox1.setToolTipText("Greater accuracy but takes longer.");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Ask to add each paralogous gene");
        jRadioButton1.setToolTipText("Only when single gene is entered and data is not from cloud.");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("New Batch");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setPreferredSize(new java.awt.Dimension(1, 1));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cloud Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        jPanel5.setToolTipText("<html>By default data is collected from the cloud. If newer data is desired another <br> option can be selected. Be aware that load times will increase significantly. <br> New data is saved to the cloud and timestamped after it is collected, so the <br> cloud always reflects the newest data run. If retrieving information <br>conventionally fails, the program defaults to the cloud. </html>");
        jPanel5.setFocusable(false);

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Collect any data on cloud");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("Collect data on cloud no older than 1 year");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("Collect data on cloud no older than");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setText("Do not collect data from cloud");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jTextField3.setText("100");
        jTextField3.setInputVerifier(new InputVerifier() {
            public boolean verify(JComponent input) {
                JTextField test = (JTextField) input;
                try{
                    int i=Integer.parseInt(test.getText());
                    if((i<100||i>9999)&&i!=-17)
                    throw new NumberFormatException();
                    useSQL = true;
                    SQLTimeLimit = Integer.parseInt(jTextField3.getText());
                    return true;
                }catch(NumberFormatException exe){
                    JOptionPane.showMessageDialog(null,"Please enter an integer greater than 99 and less than 10000", "Warning",JOptionPane.WARNING_MESSAGE);
                    test.setText("100");
                    useSQL = true;
                    SQLTimeLimit = Integer.parseInt(jTextField3.getText());
                    return false;
                }
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel10.setText("days");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton6)
                            .addComponent(jRadioButton4))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(2, 2, 2))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton6))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SNP Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        jPanel6.setName(""); // NOI18N

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("<html>Use confirmed disease causing SNPs<br>to predict pathogenicity</html>");
        jCheckBox4.setToolTipText("<html>If SNP is in an area where no other SNPs have been identified <br>as pathogenic, it is predicted to be benign with some exceptions.</html>");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("<html>Use PSIC score to predict pathogenicity</html>");
        jCheckBox5.setToolTipText("<html>Computationally expensive but provides increase in specificity</html>");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setText("Update");
        jButton6.setEnabled(false);
        jButton6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jButton6StateChanged(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Program Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        jPanel8.setToolTipText("");
        jPanel8.setFocusable(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Internet: ");

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Cloud: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Version:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Java Version:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Java Architecture:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Availible Threads: ");

        conLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cloudLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jVerLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jVerLabel.setToolTipText("");

        archLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        threadLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        progLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(updLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cloudLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(conLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(progLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jButton5))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jVerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(archLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(threadLabel)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jVerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(archLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(threadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cloudLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(304, 304, 304))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Start Page", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (updLabel.getText().indexOf("Out") != -1) {
            Object[] updateOpt = {"Update", "Continue without update"};
            int opt = JOptionPane.showOptionDialog(null, "The current version of the program is out of date.\n"
                    + "Having an out of date version can cause problems\n"
                    + "such as unexpected errors and poor performance. \nIn addition,"
                    + "existing problems may have been\nfixed in an update. Would you"
                    + " like to update now?", "Update Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, updateOpt, updateOpt);
            if (opt == 0) {
                try {
                    java.awt.Desktop.getDesktop().browse(new URI(updateURL));
                } catch (URISyntaxException | IOException exe) {
                }
                return;
            }
        }
        if (processingBatch) {
            JOptionPane.showMessageDialog(null, "Please wait until"
                    + " a batch file starts to continue.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (++numConcurrentThreads > MAX_CONCURRENT_THREADS) {
            JOptionPane.showMessageDialog(null, "Your CPU only supports a maximum of " + MAX_CONCURRENT_THREADS + " threads performing parallel calculations. Please wait for a \ncurrently open gene/batch to stop performing calcululation (ie. all SNPs are classified).", "Warning", JOptionPane.WARNING_MESSAGE);
            numConcurrentThreads--;
            return;
        }
        String geneName = JOptionPane.showInputDialog(null, "Enter the HUGO Symbol of the gene. ex. SCN9A", "Gene?", JOptionPane.PLAIN_MESSAGE);
        d[threadCounter] = new Framework();
        d[threadCounter].setFramework(d[threadCounter]);
        if (geneName != null) {
            try {
                d[threadCounter].setGene(geneName);
                geneURL = d[threadCounter].checkGene(geneName);
            } catch (Exception exe) {
            }
        } else {
            numConcurrentThreads--;
            return;
        }
        if (geneURL != null) {
            JPanel g = new GenePanel();
            this.addTab(geneName.toUpperCase(), g, true);
            d[threadCounter].setFramework(d[threadCounter]);
            d[threadCounter].setPanel(g);
            thread[threadCounter] = (new Thread(d[threadCounter]));
            thread[threadCounter].start();
            threadCounter++;
            geneURL = null;
        } else {
            numConcurrentThreads--;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) {
            jTextField1.setEnabled(true);
            jTextField2.setEnabled(true);
            useHotspots = true;
        } else {
            int opt = JOptionPane.showConfirmDialog(null, "Are you sure you want "
                    + "to disable phenotype prediction using hotspots? \n" + ""
                    + "It is highly recomended that you do not disable this feature.",
                    "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opt == 0) {
                jTextField1.setEnabled(false);
                jTextField2.setEnabled(false);
                useHotspots = false;
            } else {
                jCheckBox2.setSelected(true);
            }
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
            useParalogs = true;
        } else {
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
            useParalogs = false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (updLabel.getText().indexOf("Out") != -1) {
            Object[] updateOpt = {"Update", "Continue without update"};
            int opt = JOptionPane.showOptionDialog(null, "The current version of the program is out of date.\n"
                    + "Having an out of date version can cause problems\n"
                    + "such as unexpected errors and poor performance. \nIn addition,"
                    + "existing problems may have been\nfixed in an update. Would you"
                    + " like to update now?", "Update Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, updateOpt, updateOpt);
            if (opt == 0) {
                try {
                    java.awt.Desktop.getDesktop().browse(new URI(updateURL));
                } catch (URISyntaxException | IOException exe) {
                }
                return;
            }
        }
        if (processingBatch) {
            JOptionPane.showMessageDialog(null, "Please wait until"
                    + " a batch file starts to continue.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (++numConcurrentThreads > MAX_CONCURRENT_THREADS) {
            JOptionPane.showMessageDialog(null, "Your CPU only supports a maximum of "
                    + MAX_CONCURRENT_THREADS + " threads performing parallel calculations. "
                    + "Please wait for a \ncurrently open gene/batch to stop performing calcululation (ie. all SNPs are classified).", "Warning", JOptionPane.WARNING_MESSAGE);
            numConcurrentThreads--;
            return;
        } else {
            numConcurrentThreads--;
        }
        JFileChooser selectBatch = new JFileChooser();
        FileFilter textOnly = new FileNameExtensionFilter("Text file", "txt");
        selectBatch.setFileFilter(textOnly);
        int fileChosen = selectBatch.showDialog(null, "Add Batch");
        if (fileChosen == 1) {
            return;
        }
        BufferedReader fileReader;
        try {
            fileReader = new BufferedReader(
                    new FileReader(selectBatch.getSelectedFile().getAbsolutePath()));
        } catch (FileNotFoundException exe) {
            JOptionPane.showMessageDialog(null, "Could not find file at specified"
                    + " location!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String line;
        fileText="";
        StringBuilder fileTextBuilder = new StringBuilder();
        try {
            while ((line = fileReader.readLine()) != null) {
                fileTextBuilder.append(line).append("\r");
            }
        } catch (IOException exe) {
            JOptionPane.showMessageDialog(null, "Could not read from file at "
                    + "selected location!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        this.fileText = fileTextBuilder.toString();
        BatchManager batch = new BatchManager(fileText);
        batch.setBatchManager(batch);
        new Thread(batch).start();
        processingBatch = true;
        try {
            fileReader.close();
        } catch (IOException exe) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        askForParalog = false;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        askForParalog = true;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index = 0;
        List<String> genes = new ArrayList<>();
        Framework f = new Framework();
        while (index != -1) {
            int p = index + fileText.substring(index).indexOf("\r");
            boolean noCheck = false;
            String temp = fileText.substring(index, p);
            genes.add(temp);
            for (int i = 0; i < genes.size() - 1; i++) {
                if (genes.get(i).equals(temp)) {
                    noCheck = true;
                }
            }
            if (!noCheck) {
                String temp2 = null;
                try {
                    temp2 = f.checkGene(temp);
                } catch (Exception exe) {
                }
                if (temp2 == null) {
                    System.out.println(temp);
                }
            }
            index = index + fileText.substring(index).indexOf("\r") + 1;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (jCheckBox4.isSelected()) {
            useLit = true;
        } else {
            int opt = JOptionPane.showConfirmDialog(null, "Are you sure you want "
                    + "to disable pathogenicity prediction using SNPs in literature? \n" + ""
                    + "It is highly recommended that you do not disable this feature.",
                    "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opt == 0) {
                useLit = false;
            } else {
                jCheckBox4.setSelected(true);
            }
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        useSQL = true;
        SQLTimeLimit = -1;
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        useSQL = true;
        SQLTimeLimit = 365;
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        useSQL = true;
        SQLTimeLimit = Integer.parseInt(jTextField3.getText());
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        useSQL = false;
        SQLTimeLimit = -1;
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if (!usePSIC) {
            usePSIC = true;
        } else {
            usePSIC = false;
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(new URI(updateURL));
        } catch (URISyntaxException | IOException exe) {
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jButton6StateChanged

    }//GEN-LAST:event_jButton6StateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        infoRefresh();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        jRadioButton5.setSelected(true);
    }//GEN-LAST:event_jTextField3KeyTyped

    //Refreshes program information panel
    private static void infoRefresh() {
        //Verifies internet connection
        boolean connection = false;
        try {
            URL link = new URL("http://www.ncbi.nlm.nih.gov/");
            URLConnection c = link.openConnection();
            InputStream in = c.getInputStream();
            conLabel.setForeground(new Color(0, 100, 0));
            conLabel.setText("Connected");
            connection = true;
            if (!jButton1.isEnabled()) {
                jButton1.setEnabled(true);
                jButton2.setEnabled(true);
            }
        } catch (IOException exe) {
            conLabel.setForeground(Color.red);
            conLabel.setText("No internet connection");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
        }

        //Verifies connection to cloud
        String connectionUrl = "jdbc:sqlserver://genes.cedf0sccpt06.us-east-1.rds.amazonaws.com:1433;"
                + "databaseName=Genes;user=allAccess;password=xFz23d4a3Ln5dZ5sW";
        try {
            if (!connection) {
                throw new Exception();
            }
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(connectionUrl);
            cloudLabel.setForeground(new Color(0, 100, 0));
            cloudLabel.setText("Connected");
            String sqlQuery = "SELECT CURRENT_VER, VER_URL "
                    + "FROM dbo.UPDATES";
            Statement stmt;
            ResultSet rs;
            try {
                stmt = con.createStatement();
                rs = stmt.executeQuery(sqlQuery);
                rs.next();
                String verCheck = rs.getString(1);
                if (verCheck.equals(VERSION)) {
                    updLabel.setForeground(new Color(0, 100, 0));
                    updLabel.setText(VERSION);
                } else {
                    updLabel.setForeground(Color.red);
                    updLabel.setText(VERSION + " (Update)");
                    updateURL = rs.getString(2);
                    jButton6.setEnabled(true);
                }
            } catch (Exception exe) {
                updLabel.setForeground(Color.red);
                updLabel.setText(VERSION + " (Check failed)");
            }
            con.close();
        } catch (ClassNotFoundException exe) {
            cloudLabel.setForeground(Color.red);
            cloudLabel.setText("SQL Driver missing");
            cloudLabel.setToolTipText("View user guide for troubleshooting.");
            updLabel.setForeground(Color.red);
            updLabel.setText(VERSION + " (Check failed)");
        } catch (Exception exe) {
            cloudLabel.setForeground(Color.red);
            updLabel.setForeground(Color.red);
            updLabel.setText(VERSION + " (Check failed)");
            if (connection) {
                cloudLabel.setText("Connection error");
                cloudLabel.setToolTipText("View user guide for troubleshooting.");
            } else {
                cloudLabel.setText("No internet connection");
            }
        }

        //Java version check
        String jVer = System.getProperty("java.version");
        jVerLabel.setForeground(new Color(0, 100, 0));
        jVerLabel.setText(jVer);
        jVer = jVer.substring(0, jVer.indexOf(".") + jVer.indexOf(".") + jVer.substring(jVer.indexOf(".") + 1).indexOf("."));
        try {
            if (Double.parseDouble(jVer) < 1.7) {
                jVerLabel.setForeground(Color.red);
                jVerLabel.setFont(new Font(jVerLabel.getFont().getName(), Font.PLAIN, 10));
                jVerLabel.setText(jVerLabel.getText() + " (Update)");
            }
        } catch (NumberFormatException exe) {
            jVerLabel.setForeground(new Color(255, 133, 0));
            jVerLabel.setText("Unknown");
        }

        //Java architecture check
        String jArch = System.getProperty("os.arch");
        if (jArch.indexOf("64") != -1) {
            archLabel.setText("x64");
        } else if (jArch.indexOf("86") != -1 || jArch.indexOf("32") != -1) {
            archLabel.setText("x86");
        } else {
            archLabel.setForeground(new Color(190, 80, 0));
            archLabel.setText("Unknown");
        }
        threadLabel.setText(MAX_CONCURRENT_THREADS + "");
        System.out.println();
    }
    
    //inner class which changes color of jButton on tabs being closed
    private final static MouseListener closeSelect = new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            Component close = e.getComponent();
            if (close instanceof JButton) {
                close.setBackground(new Color(255, 100, 100));
            }
        }

        @Override
        public void mouseExited(MouseEvent e) {
            Component close = e.getComponent();
            if (close instanceof JButton) {
                close.setBackground(new Color(100, 100, 100));
            }
        }
    };

    public static Framework getCurrentThreadFinder() {
        return d[getThreadCounter()];
    }

    public static int getThreadCounter() {
        int index = jTabbedPane1.getSelectedIndex();
        int counter1 = 0;
        Component c = jTabbedPane1.getComponentAt(index);
        while (index != -1) {
            if (c instanceof GenePanel) {
                counter1++;
            }
            try {
                c = (JPanel) jTabbedPane1.getComponentAt(--index);
            } catch (ArrayIndexOutOfBoundsException exe) {
            }
        }
        return counter1 - 1;
    }

    public static int getLow() {
        return Integer.parseInt(jTextField1.getText());
    }

    public static int getHigh() {
        return Integer.parseInt(jTextField2.getText());
    }

    public static void disableSettings() {
        jCheckBox1.setEnabled(false);
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
    }

    public static void enableSettings() {
        jCheckBox1.setEnabled(true);
        if (jCheckBox1.isSelected()) {
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
        } else {
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
        }
    }

    //adds tab to display
    public static void addTab(String tabName, JPanel j, boolean important) {
        JPanel pnlTab = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        pnlTab.setOpaque(false);
        JLabel title = new JLabel(tabName);
        pnlTab.add(title);
        title.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
        JButton close = new JButton();
        close.setBackground(new Color(100, 100, 100));
        close.setPreferredSize(new Dimension(17, 17));
        close.setToolTipText("Close tab");
        close.setFocusable(false);
        close.addActionListener(new closeAction(pnlTab, important, tabName));
        close.addMouseListener(closeSelect);
        pnlTab.add(close);
        pnlTab.setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
        jTabbedPane1.addTab(null, j);
        jTabbedPane1.setTabComponentAt(jTabbedPane1.getTabCount() - 1, pnlTab);
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount() - 1);
    }

    public static void disableTabSwitching() {
        jTabbedPane1.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException exe){
            java.util.logging.Logger.getLogger(JFrameMain.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, exe);        
        }catch (InstantiationException exe){
            java.util.logging.Logger.getLogger(JFrameMain.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, exe);        
        }catch (IllegalAccessException  exe){
            java.util.logging.Logger.getLogger(JFrameMain.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, exe);        
        }catch (javax.swing.UnsupportedLookAndFeelException exe){
            java.util.logging.Logger.getLogger(JFrameMain.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, exe);        
        } 
        
        /*try{    
         ServerSocket runningCheck = new ServerSocket();
         runningCheck.bind(new InetSocketAddress(1));
         }catch(SocketException exe){
         JOptionPane.showMessageDialog(null,"An instance of the program is" 
         + " already open!", "Warning",JOptionPane.WARNING_MESSAGE);
         System.exit(1);
         }catch(Exception exe){}*/
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFrameMain().setVisible(true);
            }
        });
    }

    //close tab inner class
    private static class closeAction implements ActionListener {

        Component tabComponent;
        boolean geneTab;
        String tabName;

        closeAction(Component tabComponent, boolean geneTab, String tabName) {
            this.tabComponent = tabComponent;
            this.geneTab = geneTab;
            this.tabName = tabName;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (geneTab && !(tabName.equals("Batch Errors") || tabName.equals("Batch Summary"))) {
                int confirm = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to close this tab?",
                        "Close tab confirmation",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (confirm != 0) {
                    return;
                }
            } else if (tabName.equals("Batch Errors") || tabName.equals("Batch Summary")) {
                JOptionPane.showMessageDialog(null, "Batch summary and error "
                        + "tabs cannot be closed.",
                        "Tab Close Message", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            int index = jTabbedPane1.indexOfTabComponent(tabComponent);
            Component c = jTabbedPane1.getComponentAt(index);
            if (c instanceof GenePanel) {
                Framework tabFramework = ((GenePanel) c).getFramework();
                if (tabFramework != null) {
                    tabFramework.nullFramework();
                    for(int i=0; i<d.length; i++)
                        if(d[i]!=null&&d[i].equals(tabFramework)){
                            d[i]=null;
                            break;
                        }
                    tabFramework = null;
                }
            }
            c = null;
            jTabbedPane1.remove(index);
            System.gc();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel archLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private static javax.swing.JLabel cloudLabel;
    private static javax.swing.JLabel conLabel;
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private static javax.swing.JButton jButton6;
    private static javax.swing.JCheckBox jCheckBox1;
    private static javax.swing.JCheckBox jCheckBox2;
    private static javax.swing.JCheckBox jCheckBox4;
    private static javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private static javax.swing.JRadioButton jRadioButton1;
    private static javax.swing.JRadioButton jRadioButton2;
    private static javax.swing.JRadioButton jRadioButton3;
    private static javax.swing.JRadioButton jRadioButton4;
    private static javax.swing.JRadioButton jRadioButton5;
    private static javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JSeparator jSeparator1;
    private static javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField jTextField2;
    private static javax.swing.JTextField jTextField3;
    private static javax.swing.JLabel jVerLabel;
    public static javax.swing.JLabel progLabel;
    private static javax.swing.JLabel threadLabel;
    private static javax.swing.JLabel updLabel;
    // End of variables declaration//GEN-END:variables
    private static final String VERSION = "1.0.2"; //current version of GESPA
    private static String geneURL; 
    private static String updateURL; //URL Location of GESPA update
    private static Thread[] thread = new Thread[500]; //thread array for single ganes
    private static int threadCounter = 0; 
    private static Framework[] d = new Framework[500]; //framework array for single genes
    public static int numConcurrentThreads;
    public static int SQLTimeLimit = -1; //number of days SQL data is valid for
    public static boolean useParalogs = true; 
    public static boolean askForParalog = false;
    public static boolean useHotspots = true;
    public static boolean useLit = true;
    public static boolean processingBatch = false;
    public static boolean useSQL = true;
    public static boolean usePSIC = false;
    private String fileText;
    public static final int MAX_CONCURRENT_THREADS = Runtime.getRuntime().availableProcessors();
}
